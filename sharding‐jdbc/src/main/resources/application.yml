#server:
#  port: 56081
#  servlet:
#    context-path: /sharding-jdbc-simple-demo
#spring:
#  application:
#    name: sharding-jdbc
#  http:
#    encoding:
#      enabled: true
#      charset: utf-8
#      force: true
#  main:
#    allow-bean-definition-overriding: true
#  shardingsphere:
#    datasource:
#      names: m1 #1.首先定义数据源m1，并对m1进行实际的参数配置。
#      m1:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driverClassName: com.mysql.jdbc.Driver
#        url: jdbc:mysql:///order_db?useUnicode=true
#        username: root
#        password: 123456
#    sharding:
#      tables:
#        t_order:
#          actualDataNodes: m1.t_order_$->{1..2} #2.指定t_order表的数据分布情况，他分布在m1.t_order_1，m1.t_order_2
#          tableStrategy:
#            inline:
#              shardingColumn: order_id
#              algorithmExpression: t_order_$->{order_id % 2 + 1} #4.定义t_order分片策略，order_id为偶数的数据落在t_order_1，为奇数的落在t_order_2，分表策略的表达式为 t_order_$->{order_id % 2 + 1}
#          keyGenerator:
#            type: SNOWFLAKE #3.指定t_order表的主键生成策略为SNOWFLAKE，SNOWFLAKE是一种分布式自增算法，保证id全局唯一
#            column: order_id
#    props:
#      sql:
#        show: true
#mybatis:
#  configuration:
#    map-underscore-to-camel-case: true
#swagger:
#  enable: true
#logging:
#  level:
#    root: info
#    org.springframework.web: info
#    com.itheima.dbsharding: debug
#    druid.sql: debug